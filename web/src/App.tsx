import {
  ChangeEvent,
  FC,
  ReactNode,
  useCallback,
  MouseEvent,
  useRef,
  useState,
} from "react";

const Audio: FC<{ src: string; description: string }> = ({
  src,
  description,
}) => {
  const audioRef = useRef<HTMLAudioElement | null>(null);
  const [playing, setPlaying] = useState(false);
  const [duration, setDuration] = useState(0);
  const [currentTime, setCurrentTime] = useState(0);
  const [seeking, setSeeking] = useState(false);

  const onClick = useCallback(() => {
    if (audioRef.current) {
      if (audioRef.current.paused) {
        audioRef.current.play();
        setPlaying(true);
      } else {
        audioRef.current.pause();
        setPlaying(false);
      }
    }
  }, [audioRef]);

  const onSeeking = useCallback((evt: ChangeEvent<HTMLInputElement>) => {
    setCurrentTime(parseFloat(evt.target.value));
  }, []);

  const onSeekingRelease = (
    evt: MouseEvent<HTMLInputElement, globalThis.MouseEvent>
  ) => {
    setSeeking(false);
    if (audioRef.current) {
      audioRef.current.currentTime = parseFloat(evt.currentTarget.value);
      if (!playing) {
        setPlaying(true);
        audioRef.current.play();
      }
    }
  };
  const onSeekingClick = () => {
    setSeeking(true);
    if (playing) {
      setPlaying(false);
      audioRef.current?.pause();
    }
  };

  const onDurationChange = useCallback(() => {
    setDuration(audioRef.current?.duration || 0);
  }, [audioRef]);

  const onTimeUpdate = useCallback(() => {
    if (!seeking) setCurrentTime(audioRef.current?.currentTime || 0);
  }, [seeking, audioRef]);

  const onEnd = useCallback(() => {
    setPlaying(false);
  }, []);

  return (
    <div className="px-4 py-4 rounded-lg bg-dark-off">
      <button type="button" className="mr-2 text-2xl" onClick={onClick}>
        {playing ? (
          <i className="fas fa-pause" />
        ) : (
          <i className="fas fa-play" />
        )}
      </button>

      <input
        type="range"
        min="0"
        max={duration}
        value={currentTime}
        onChange={onSeeking}
        onMouseDown={onSeekingClick}
        onMouseUp={onSeekingRelease}
        onDurationChange={onDurationChange}
      />

      <div className="mt-2 text-slate-300">{description}</div>

      <audio
        ref={audioRef}
        src={src}
        onEnded={onEnd}
        onTimeUpdate={onTimeUpdate}
        onDurationChange={onDurationChange}
      />
    </div>
  );
};

const Card = ({
  children,
  heading,
  body,
}: {
  heading: string;
  body: string;
  children?: ReactNode;
}) => (
  <div className="px-4 py-6 h-80 rounded-lg bg-dark-off">
    <h4 className="font-bold text-2xl text-center md:text-left mb-6">
      {heading}
    </h4>
    <div className="">{body}</div>
  </div>
);

function App() {
  return (
    <section className="h-full pt-8 max-w-7xl mx-auto">
      <header className="text-center py-10">
        <h2 className="font-bold text-4xl my-4">
          Nature voices for Characters
        </h2>

        <p className="">
          Enchace your work flow with tailored voices generated by AI.
        </p>
      </header>

      <div className="">
        <p className="text-center font-semibold text-xl text-slate-300">
          "Hello, this is OneTake Audio."
        </p>
        <div className="grid grid-cols-audio gap-y-4 gap-x-2 px-2 py-8">
          <Audio
            description="Woman, Calm"
            src="https://www.soundeffectsplus.com/uploads/prod_audio/41747450_combine-harvester-operating-01.mp3"
          />

          <Audio
            description="Woman, Calm"
            src="https://www.soundeffectsplus.com/uploads/prod_audio/41747450_combine-harvester-operating-01.mp3"
          />

          <Audio
            description="Woman, Calm"
            src="https://www.soundeffectsplus.com/uploads/prod_audio/41747450_combine-harvester-operating-01.mp3"
          />

          <Audio
            description="Woman, Calm"
            src="https://www.soundeffectsplus.com/uploads/prod_audio/41747450_combine-harvester-operating-01.mp3"
          />

          <Audio
            description="Woman, Calm"
            src="https://www.soundeffectsplus.com/uploads/prod_audio/41747450_combine-harvester-operating-01.mp3"
          />

          <Audio
            description="Woman, Calm"
            src="https://www.soundeffectsplus.com/uploads/prod_audio/41747450_combine-harvester-operating-01.mp3"
          />

          <Audio
            description="Woman, Calm"
            src="https://www.soundeffectsplus.com/uploads/prod_audio/41747450_combine-harvester-operating-01.mp3"
          />

          <Audio
            description="Woman, Calm"
            src="https://www.soundeffectsplus.com/uploads/prod_audio/41747450_combine-harvester-operating-01.mp3"
          />
        </div>
      </div>
      <div className="grid grid-cols-cards gap-4 px-4 items-center">
        <Card
          heading="Text to Speech"
          body="With text to speech, immediately see your AI voice actors update recording."
        />

        <Card
          heading="Voice Styles"
          body="With our wide range of presents voices controlling for emotions and pitch to cast the best actor for your game."
        />

        <Card
          heading="Clone Voices"
          body="Can't find a the perfect voice or need accents not available? Using our AI, clone your voice to create a new actor just for your use."
        />
      </div>
    </section>
  );
}

export default App;
